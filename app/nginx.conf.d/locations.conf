# Shared location configurations for all environments

# Specify the cloud domain each page should use.
set $cloud_loc '<head>\n\t<meta name="snap-cloud-domain" location="$scheme://$host:$server_port">';

# The community front-end, the snap-site repo compiled into site/www/
location / {
    sub_filter <head> $cloud_loc;
    alias site/www/;
    if ($request_uri ~ ^/(.*)\.html$) {
        return 302 /$1;
    }
    # This serves the files from old_site/ but at the same path as
    # requested, rather than redirecting.
    try_files $uri $uri.html $uri/ ../../old_site/$uri @lapisapp;
}


# lapis API server back-end
location /api/v1/ {
    default_type text/html;
    content_by_lua_block {
        require("lapis").serve("app")
    }
}

# This is a fallback for try_files
# Any routes that's not a file can be redirected to Lapis
location @lapisapp {
    access_log logs/lapis_fallback_access.log main_ext if=$should_log;
    default_type text/html;
    content_by_lua_block {
        require("lapis").serve("app")
    }
}

# Static content from snapCloud
location /static/ {
    alias static/;
}

# The old snap.berkeley.edu site with all its BYOB content, etc.
location /old_site {
    alias html/old_site/;
}

location /js-extensions {
    alias html/extensions/;
}

# Redirect /site/x to /x.
# These URLs were on the first version of the social site.
location ~ ^/site/?(.*) {
   return 301 $scheme://$http_host/$1$is_args$query_string;
}

include nginx.conf.d/snap-ide.conf;

# /init used to load tools, it can just redirect now.
# Commented out because it conflicts with the API route.
# location /init {
#     return 301 /snap/;
# }
